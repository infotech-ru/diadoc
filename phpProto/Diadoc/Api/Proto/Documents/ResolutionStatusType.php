<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Documents/Document.proto

namespace Diadoc\Api\Proto\Documents;

use UnexpectedValueException;

/**
 * Protobuf type <code>Diadoc.Api.Proto.Documents.ResolutionStatusType</code>
 */
class ResolutionStatusType
{
    /**
     * Generated from protobuf enum <code>None = 0;</code>
     */
    const None = 0;
    /**
     * Generated from protobuf enum <code>Approved = 1;</code>
     */
    const Approved = 1;
    /**
     * Generated from protobuf enum <code>Disapproved = 2;</code>
     */
    const Disapproved = 2;
    /**
     * Generated from protobuf enum <code>ApprovementRequested = 3;</code>
     */
    const ApprovementRequested = 3;
    /**
     * Generated from protobuf enum <code>SignatureRequested = 4;</code>
     */
    const SignatureRequested = 4;
    /**
     * Generated from protobuf enum <code>SignatureDenied = 5;</code>
     */
    const SignatureDenied = 5;
    /**
     * Generated from protobuf enum <code>ActionsRequested = 6;</code>
     */
    const ActionsRequested = 6;

    private static $valueToName = [
        self::None => 'None',
        self::Approved => 'Approved',
        self::Disapproved => 'Disapproved',
        self::ApprovementRequested => 'ApprovementRequested',
        self::SignatureRequested => 'SignatureRequested',
        self::SignatureDenied => 'SignatureDenied',
        self::ActionsRequested => 'ActionsRequested',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

