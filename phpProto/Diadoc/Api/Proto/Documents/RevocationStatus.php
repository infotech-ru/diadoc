<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Documents/Document.proto

namespace Diadoc\Api\Proto\Documents;

use UnexpectedValueException;

/**
 * Protobuf type <code>Diadoc.Api.Proto.Documents.RevocationStatus</code>
 */
class RevocationStatus
{
    /**
     * Generated from protobuf enum <code>UnknownRevocationStatus = 0;</code>
     */
    const UnknownRevocationStatus = 0;
    /**
     * Generated from protobuf enum <code>RevocationStatusNone = 1;</code>
     */
    const RevocationStatusNone = 1;
    /**
     * Generated from protobuf enum <code>RevocationIsRequestedByMe = 2;</code>
     */
    const RevocationIsRequestedByMe = 2;
    /**
     * Generated from protobuf enum <code>RequestsMyRevocation = 3;</code>
     */
    const RequestsMyRevocation = 3;
    /**
     * Generated from protobuf enum <code>RevocationAccepted = 4;</code>
     */
    const RevocationAccepted = 4;
    /**
     * Generated from protobuf enum <code>RevocationRejected = 5;</code>
     */
    const RevocationRejected = 5;

    private static $valueToName = [
        self::UnknownRevocationStatus => 'UnknownRevocationStatus',
        self::RevocationStatusNone => 'RevocationStatusNone',
        self::RevocationIsRequestedByMe => 'RevocationIsRequestedByMe',
        self::RequestsMyRevocation => 'RequestsMyRevocation',
        self::RevocationAccepted => 'RevocationAccepted',
        self::RevocationRejected => 'RevocationRejected',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

