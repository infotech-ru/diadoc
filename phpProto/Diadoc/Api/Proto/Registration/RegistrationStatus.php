<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Registration/RegistrationRequest.proto

namespace Diadoc\Api\Proto\Registration;

use UnexpectedValueException;

/**
 * Protobuf type <code>Diadoc.Api.Proto.Registration.RegistrationStatus</code>
 */
class RegistrationStatus
{
    /**
     * Generated from protobuf enum <code>Unknown = 0;</code>
     */
    const Unknown = 0;
    /**
     * Generated from protobuf enum <code>AccessIsDenied = 1;</code>
     */
    const AccessIsDenied = 1;
    /**
     * Generated from protobuf enum <code>AccessRequestIsRejected = 2;</code>
     */
    const AccessRequestIsRejected = 2;
    /**
     * Generated from protobuf enum <code>CertificateOwnershipProofIsRequired = 3;</code>
     */
    const CertificateOwnershipProofIsRequired = 3;
    /**
     * Generated from protobuf enum <code>CertificateIsNotQualified = 4;</code>
     */
    const CertificateIsNotQualified = 4;
    /**
     * Generated from protobuf enum <code>RegistrationIsCompleted = 5;</code>
     */
    const RegistrationIsCompleted = 5;
    /**
     * Generated from protobuf enum <code>RegistrationIsInProgress = 6;</code>
     */
    const RegistrationIsInProgress = 6;
    /**
     * Generated from protobuf enum <code>RegistrationInBranchIsForbidden = 7;</code>
     */
    const RegistrationInBranchIsForbidden = 7;
    /**
     * Generated from protobuf enum <code>AccessRequestIsPending = 8;</code>
     */
    const AccessRequestIsPending = 8;
    /**
     * Generated from protobuf enum <code>OrganizationNotFound = 9;</code>
     */
    const OrganizationNotFound = 9;

    private static $valueToName = [
        self::Unknown => 'Unknown',
        self::AccessIsDenied => 'AccessIsDenied',
        self::AccessRequestIsRejected => 'AccessRequestIsRejected',
        self::CertificateOwnershipProofIsRequired => 'CertificateOwnershipProofIsRequired',
        self::CertificateIsNotQualified => 'CertificateIsNotQualified',
        self::RegistrationIsCompleted => 'RegistrationIsCompleted',
        self::RegistrationIsInProgress => 'RegistrationIsInProgress',
        self::RegistrationInBranchIsForbidden => 'RegistrationInBranchIsForbidden',
        self::AccessRequestIsPending => 'AccessRequestIsPending',
        self::OrganizationNotFound => 'OrganizationNotFound',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

