<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: TimeBasedFilter.proto

namespace Diadoc\Api\Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>Diadoc.Api.Proto.TimeBasedFilter</code>
 */
class TimeBasedFilter extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;</code>
     */
    protected $FromTimestamp = null;
    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;</code>
     */
    protected $ToTimestamp = null;
    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.SortDirection SortDirection = 3;</code>
     */
    protected $SortDirection = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Diadoc\Api\Proto\Timestamp $FromTimestamp
     *     @type \Diadoc\Api\Proto\Timestamp $ToTimestamp
     *     @type int $SortDirection
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TimeBasedFilter::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;</code>
     * @return \Diadoc\Api\Proto\Timestamp|null
     */
    public function getFromTimestamp()
    {
        return $this->FromTimestamp;
    }

    public function hasFromTimestamp()
    {
        return isset($this->FromTimestamp);
    }

    public function clearFromTimestamp()
    {
        unset($this->FromTimestamp);
    }

    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp FromTimestamp = 1;</code>
     * @param \Diadoc\Api\Proto\Timestamp $var
     * @return $this
     */
    public function setFromTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Diadoc\Api\Proto\Timestamp::class);
        $this->FromTimestamp = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;</code>
     * @return \Diadoc\Api\Proto\Timestamp|null
     */
    public function getToTimestamp()
    {
        return $this->ToTimestamp;
    }

    public function hasToTimestamp()
    {
        return isset($this->ToTimestamp);
    }

    public function clearToTimestamp()
    {
        unset($this->ToTimestamp);
    }

    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.Timestamp ToTimestamp = 2;</code>
     * @param \Diadoc\Api\Proto\Timestamp $var
     * @return $this
     */
    public function setToTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Diadoc\Api\Proto\Timestamp::class);
        $this->ToTimestamp = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.SortDirection SortDirection = 3;</code>
     * @return int
     */
    public function getSortDirection()
    {
        return isset($this->SortDirection) ? $this->SortDirection : 0;
    }

    public function hasSortDirection()
    {
        return isset($this->SortDirection);
    }

    public function clearSortDirection()
    {
        unset($this->SortDirection);
    }

    /**
     * Generated from protobuf field <code>optional .Diadoc.Api.Proto.SortDirection SortDirection = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setSortDirection($var)
    {
        GPBUtil::checkEnum($var, \Diadoc\Api\Proto\SortDirection::class);
        $this->SortDirection = $var;

        return $this;
    }

}

