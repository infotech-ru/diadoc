syntax = "proto3";
import "Timestamp.proto";
import "DocumentId.proto";
import "TotalCountType.proto";
import "TimeBasedFilter.proto";
import "Docflow/DocumentWithDocflow.proto";

package Diadoc.Api.Proto.Docflow;

message GetDocflowBatchRequest {
    repeated GetDocflowRequest Requests = 1;
}

message GetDocflowRequest {
    DocumentId DocumentId = 1;
    optional string LastEventId = 2;
    optional bool InjectEntityContent = 3;
}

message GetDocflowBatchResponse {
    repeated DocumentWithDocflow Documents = 1;
}

enum SearchScope {
    SearchScopeAny = 0;
    SearchScopeIncoming = 1;
    SearchScopeOutgoing = 2;
    SearchScopeDeleted = 3;
    SearchScopeInternal = 4;
}

message SearchDocflowsRequest {
    string QueryString = 1;
    optional int32 Count = 2;
    optional int32 FirstIndex = 3;
    optional SearchScope Scope = 4;
    optional bool InjectEntityContent = 5;
}

message SearchDocflowsResponse {
    repeated DocumentWithDocflow Documents = 1;
    optional bool HaveMoreDocuments = 2;
}

message GetDocflowsByPacketIdRequest {
    string PacketId = 1;
    optional int32 Count = 2;
    optional bool InjectEntityContent = 3;
    optional bytes AfterIndexKey = 4;
}

message FetchedDocument {
    DocumentWithDocflow Document = 1;
    bytes IndexKey = 2;
}

message GetDocflowsByPacketIdResponse {
    repeated FetchedDocument Documents = 1;
    optional bytes NextPageIndexKey = 2;
}

message GetDocflowEventsRequest {
    TimeBasedFilter Filter = 1;
    optional bytes AfterIndexKey = 2;
    optional bool PopulateDocuments = 3;
    optional bool InjectEntityContent = 4;
    optional bool PopulatePreviousDocumentStates = 5;
    repeated string MessageTypes = 6;
    repeated string DocumentDirections = 7;
    optional string DepartmentId = 8;
    repeated string TypeNamedIds = 9;
    optional string CounteragentBoxId = 10;
    optional int32 Limit = 11;
}

message GetDocflowEventsResponse {
    optional int32 TotalCount = 1;
    repeated DocflowEvent Events = 2;
    TotalCountType TotalCountType = 3;
}

message DocflowEvent {
    optional string EventId = 1;
    optional Timestamp Timestamp = 2;
    optional DocumentId DocumentId = 3;
    optional bytes IndexKey = 4;
    optional DocumentWithDocflow Document = 5;
    optional string PreviousEventId = 6;
    optional DocumentWithDocflow PreviousDocumentState = 7;
}
