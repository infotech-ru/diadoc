syntax = "proto3";
import "DocumentId.proto";
import "LockMode.proto";
import "CustomDataItem.proto";
import "ResolutionRequestType.proto";
import "ResolutionType.proto";
import "Invoicing/Signer.proto";
import "Invoicing/ExtendedSigner.proto";
import "Docflow/DocumentInfo.proto";
import "Events/PowerOfAttorneyToPost.proto";

package Diadoc.Api.Proto.Events;

message MessageToPost {
    string FromBoxId = 1;
    optional string ToBoxId = 2;
    repeated XmlDocumentAttachment Invoices = 3;
    repeated NonformalizedAttachment NonformalizedDocuments = 4;
    repeated BasicDocumentAttachment Torg12Documents = 5;
    repeated AcceptanceCertificateAttachment AcceptanceCertificates = 7;
    repeated StructuredDataAttachment StructuredDataAttachments = 8;
    repeated BasicDocumentAttachment ProformaInvoices = 9;
    repeated XmlDocumentAttachment XmlTorg12SellerTitles = 10;
    repeated XmlDocumentAttachment XmlAcceptanceCertificateSellerTitles = 11;
    optional string ToDepartmentId = 12;
    optional bool IsDraft = 13;
    optional bool LockDraft = 14;
    optional bool StrictDraftValidation = 15;
    optional bool IsInternal = 16;
    optional string FromDepartmentId = 17;
    optional bool DelaySend = 18;
    repeated PriceListAttachment PriceLists = 19;
    repeated NonformalizedAttachment PriceListAgreements = 20;
    repeated NonformalizedAttachment CertificateRegistries = 21;
    repeated ReconciliationActAttachment ReconciliationActs = 22;
    repeated ContractAttachment Contracts = 23;
    repeated Torg13Attachment Torg13Documents = 24;
    repeated ServiceDetailsAttachment ServiceDetailsDocuments = 25;
    optional string ProxyBoxId = 26;
    optional string ProxyDepartmentId = 27;
    repeated EncryptedInvoiceAttachment EncryptedInvoices = 28;
    repeated EncryptedXmlDocumentAttachment EncryptedXmlTorg12SellerTitles = 29;
    repeated EncryptedXmlDocumentAttachment EncryptedXmlAcceptanceCertificateSellerTitles = 30;
    repeated SupplementaryAgreementAttachment SupplementaryAgreements = 31;
    optional bool LockPacket = 32;
    repeated XmlDocumentAttachment UniversalTransferDocumentSellerTitles = 33;
    repeated DocumentAttachment DocumentAttachments = 34;
    optional LockMode LockMode = 35;
}

message EncryptedXmlDocumentAttachment {
    SignedContent SignedContent = 1;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    optional string CustomDocumentId = 6;
    repeated CustomDataItem CustomData = 7;
    EncryptedDocumentMetadata Metadata = 8;
    EncryptedXmlBasicDocumentMetadata XmlBasicMetadata = 9;
}

message EncryptedInvoiceAttachment {
    SignedContent SignedContent = 1;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    optional string CustomDocumentId = 6;
    repeated CustomDataItem CustomData = 7;
    EncryptedDocumentMetadata Metadata = 8;
    optional EncryptedInvoiceMetadata InvoiceMetadata = 9;
    optional EncryptedInvoiceCorrectionMetadata InvoiceCorrectionMetadata = 10;
}

message EncryptedDocumentMetadata {
    string FileId = 1;
    string BuyerFnsParticipantId = 2;
    string SenderFnsParticipantId = 3;
    Docflow.DocumentDateAndNumber DocumentDateAndNumber = 4;
}

message EncryptedXmlBasicDocumentMetadata {
    string FormationDate = 1;
    string FormationTime = 2;
    optional string DocumentName = 3;
}

message EncryptedInvoiceMetadata {
    optional Docflow.DocumentDateAndNumber RevisionDateAndNumber = 1;
}

message EncryptedInvoiceCorrectionMetadata {
    Docflow.DocumentDateAndNumber OriginalInvoiceDateAndNumber = 1;
    optional Docflow.DocumentDateAndNumber OriginalInvoiceRevisionDateAndNumber = 2;
    optional Docflow.DocumentDateAndNumber InvoiceCorrectionRevisionDateAndNumber = 3;
}

message XmlDocumentAttachment {
    SignedContent SignedContent = 1;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    optional string CustomDocumentId = 6;
    optional bool NeedReceipt = 7;
    repeated CustomDataItem CustomData = 8;
}

message NonformalizedAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    optional bool NeedRecipientSignature = 4;
    repeated DocumentId InitialDocumentIds = 5;
    repeated DocumentId SubordinateDocumentIds = 6;
    optional string DocumentDate = 7;
    optional string DocumentNumber = 8;
    optional string CustomDocumentId = 9;
    optional bool NeedReceipt = 10;
    repeated CustomDataItem CustomData = 11;
}

message BasicDocumentAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    string DocumentDate = 6;
    string DocumentNumber = 7;
    string Total = 8;
    optional string CustomDocumentId = 9;
    optional string Vat = 10;
    optional string Grounds = 11;
    optional bool NeedReceipt = 12;
    repeated CustomDataItem CustomData = 13;
}

message Torg13Attachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    string DocumentDate = 6;
    string DocumentNumber = 7;
    string Total = 8;
    optional string CustomDocumentId = 9;
    optional string Grounds = 11;
    optional bool NeedReceipt = 12;
    repeated CustomDataItem CustomData = 13;
}

message AcceptanceCertificateAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    string DocumentDate = 6;
    optional string DocumentNumber = 7;
    string Total = 8;
    optional string CustomDocumentId = 9;
    optional string Vat = 10;
    optional string Grounds = 11;
    optional bool NeedReceipt = 12;
    optional bool NeedRecipientSignature = 13;
    repeated CustomDataItem CustomData = 14;
}

message TrustConnectionRequestAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    optional string CustomDocumentId = 4;
    repeated CustomDataItem CustomData = 5;
}

message StructuredDataAttachment {
    bytes Content = 1;
    string FileName = 2;
    string ParentCustomDocumentId = 3;
}

message PriceListAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    optional string CustomDocumentId = 6;
    string DocumentDate = 7;
    string DocumentNumber = 8;
    string PriceListEffectiveDate = 9;
    string ContractDocumentDate = 10;
    string ContractDocumentNumber = 11;
    optional bool NeedReceipt = 12;
    repeated CustomDataItem CustomData = 13;
}

message ReconciliationActAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 5;
    repeated DocumentId SubordinateDocumentIds = 6;
    string DocumentDate = 7;
    optional string DocumentNumber = 8;
    optional string CustomDocumentId = 9;
    optional bool NeedReceipt = 10;
    repeated CustomDataItem CustomData = 11;
}

message ContractAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    optional string CustomDocumentId = 6;
    string DocumentDate = 7;
    string DocumentNumber = 8;
    optional string ContractPrice = 9;
    optional string ContractType = 10;
    optional bool NeedReceipt = 11;
    repeated CustomDataItem CustomData = 12;
}

message SupplementaryAgreementAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 4;
    repeated DocumentId SubordinateDocumentIds = 5;
    optional string CustomDocumentId = 6;
    string DocumentDate = 7;
    string DocumentNumber = 8;
    optional string Total = 9;
    string ContractNumber = 10;
    string ContractDate = 11;
    optional string ContractType = 12;
    optional bool NeedReceipt = 13;
    repeated CustomDataItem CustomData = 14;
}

message ServiceDetailsAttachment {
    SignedContent SignedContent = 1;
    string FileName = 2;
    optional string Comment = 3;
    repeated DocumentId InitialDocumentIds = 5;
    repeated DocumentId SubordinateDocumentIds = 6;
    optional string DocumentDate = 7;
    optional string DocumentNumber = 8;
    optional string CustomDocumentId = 9;
    optional bool NeedReceipt = 10;
    repeated CustomDataItem CustomData = 11;
}

message DocumentAttachment {
    SignedContent SignedContent = 1;
    optional string Comment = 3;
    optional bool NeedRecipientSignature = 4;
    repeated DocumentId InitialDocumentIds = 5;
    repeated DocumentId SubordinateDocumentIds = 6;
    optional string CustomDocumentId = 9;
    optional bool NeedReceipt = 10;
    repeated CustomDataItem CustomData = 11;
    string TypeNamedId = 12;
    optional string Function = 13;
    optional string Version = 14;
    repeated MetadataItem Metadata = 15;
    optional int32 WorkflowId = 16;
    optional bool IsEncrypted = 17;
    optional string EditingSettingId = 18;
}

message MetadataItem {
    string Key = 1;
    string Value = 2;
}

message MessagePatchToPost {
    string BoxId = 1;
    string MessageId = 2;
    repeated ReceiptAttachment Receipts = 3;
    repeated CorrectionRequestAttachment CorrectionRequests = 4;
    repeated DocumentSignature Signatures = 5;
    repeated RequestedSignatureRejection RequestedSignatureRejections = 6;
    repeated RecipientTitleAttachment XmlTorg12BuyerTitles = 7;
    repeated RecipientTitleAttachment XmlAcceptanceCertificateBuyerTitles = 8;
    repeated ResolutionAttachment Resolutions = 9;
    repeated ResolutionRequestAttachment ResolutionRequests = 10;
    repeated ResolutionRequestCancellationAttachment ResolutionRequestCancellations = 11;
    repeated ResolutionRequestDenialAttachment ResolutionRequestDenials = 12;
    repeated ResolutionRequestDenialCancellationAttachment ResolutionRequestDenialCancellations = 13;
    repeated RevocationRequestAttachment RevocationRequests = 14;
    repeated XmlSignatureRejectionAttachment XmlSignatureRejections = 15;
    repeated CustomDataPatch CustomDataPatches = 16;
    repeated ResolutionRouteAssignment ResolutionRouteAssignments = 17;
    repeated SignatureVerification SignatureVerifications = 18;
    repeated EditDocumentPacketCommand EditDocumentPacketCommands = 19;
    repeated RecipientTitleAttachment UniversalTransferDocumentBuyerTitles = 20;
    repeated ResolutionRouteRemoval ResolutionRouteRemovals = 21;
    repeated RecipientTitleAttachment RecipientTitles = 22;
    repeated EditingPatch EditingPatches = 24;
}

message EditingPatch {
    string ParentEntityId = 1;
    UnsignedContent Content = 2;
    repeated string Labels = 3;
}

message SignatureVerification {
    string InitialDocumentId = 1;
    bool IsValid = 2;
    optional string ErrorMessage = 3;
    repeated string Labels = 4;
}

message ResolutionRequestAttachment {
    string InitialDocumentId = 1;
    ResolutionRequestType Type = 2;
    optional string TargetUserId = 3;
    optional string TargetDepartmentId = 4;
    optional string Comment = 5;
    repeated string Labels = 6;
}

message ResolutionRouteAssignment {
    string InitialDocumentId = 1;
    string RouteId = 2;
    optional string Comment = 3;
    repeated string Labels = 4;
}

message ResolutionRequestCancellationAttachment {
    string InitialResolutionRequestId = 1;
    optional string Comment = 2;
    repeated string Labels = 3;
}

message ResolutionRequestDenialCancellationAttachment {
    string InitialResolutionRequestDenialId = 1;
}

message ResolutionRequestDenialAttachment {
    string InitialResolutionRequestId = 1;
    optional string Comment = 2;
    repeated string Labels = 3;
}

message ResolutionAttachment {
    string InitialDocumentId = 1;
    ResolutionType ResolutionType = 2;
    optional string Comment = 3;
    repeated string Labels = 4;
}

message ReceiptAttachment {
    string ParentEntityId = 1;
    SignedContent SignedContent = 2;
    repeated string Labels = 4;
}

message RecipientTitleAttachment {
    string ParentEntityId = 1;
    SignedContent SignedContent = 2;
    repeated string Labels = 4;
    bool NeedReceipt = 5;
}

message CorrectionRequestAttachment {
    string ParentEntityId = 1;
    SignedContent SignedContent = 2;
    repeated string Labels = 4;
}

message DocumentSignature {
    string ParentEntityId = 1;
    optional bytes Signature = 2;
    optional bool SignWithTestSignature = 4;
    optional bool IsApprovementSignature = 5;
    optional string SignatureNameOnShelf = 6;
    optional string PatchedContentId = 7;
    repeated string Labels = 8;
    optional PowerOfAttorneyToPost PowerOfAttorney = 9;
}

message DocumentSenderSignature {
    string ParentEntityId = 1;
    optional bytes Signature = 2;
    optional bool SignWithTestSignature = 4;
    optional string PatchedContentId = 5;
    optional PowerOfAttorneyToPost PowerOfAttorney = 6;
}

message RequestedSignatureRejection {
    string ParentEntityId = 1;
    SignedContent SignedContent = 2;
    repeated string Labels = 3;
}

message SignedContent {
    optional bytes Content = 1;
    optional bytes Signature = 2;
    optional string NameOnShelf = 4;
    optional bool SignWithTestSignature = 5;
    optional string SignatureNameOnShelf = 6;
    optional PowerOfAttorneyToPost PowerOfAttorney = 7;
}

message DraftToSend {
    string BoxId = 1;
    string DraftId = 2;
    optional string ToBoxId = 3;
    optional string ToDepartmentId = 4;
    repeated DocumentSenderSignature DocumentSignatures = 5;
    optional string ProxyBoxId = 6;
    optional string ProxyDepartmentId = 7;
}

message PrepareDocumentsToSignRequest {
    string BoxId = 1;
    repeated DraftDocumentToPatch DraftDocuments = 2;
    repeated DocumentToPatch Documents = 3;
    repeated ContentToPatch Contents = 4;
}

message DraftDocumentToPatch {
    DocumentId DocumentId = 1;
    optional string ToBoxId = 2;
    optional Invoicing.Signer Signer = 3;
    repeated Invoicing.Signers.ExtendedSigner ExtendedSigner = 4;
    optional bytes SignerContent = 5;
}

message ContentToPatch {
    string TypeNamedId = 1;
    string Function = 2;
    string Version = 3;
    UnsignedContent Content = 4;
    optional string ToBoxId = 5;
    optional Invoicing.Signer Signer = 6;
    repeated Invoicing.Signers.ExtendedSigner ExtendedSigner = 7;
    optional bytes SignerContent = 8;
}

message DocumentToPatch {
    DocumentId DocumentId = 1;
    optional Invoicing.Signer Signer = 2;
    repeated Invoicing.Signers.ExtendedSigner ExtendedSigner = 3;
    optional bytes SignerContent = 4;
}

message DocumentPatchedContent {
    DocumentId DocumentId = 1;
    string PatchedContentId = 2;
    optional bytes Content = 3;
}

message PrepareDocumentsToSignResponse {
    repeated DocumentPatchedContent DocumentPatchedContents = 1;
}

message MessageToSend {
    string BoxId = 1;
    string MessageId = 2;
    repeated DocumentSignature DocumentSignatures = 3;
}

message RevocationRequestAttachment {
    string ParentEntityId = 1;
    SignedContent SignedContent = 2;
    repeated string Labels = 3;
}

message XmlSignatureRejectionAttachment {
    string ParentEntityId = 1;
    SignedContent SignedContent = 2;
    repeated string Labels = 3;
}

message RoamingNotificationToPost {
    string BoxId = 1;
    string EventId = 2;
    bool Success = 3;
    optional string Description = 4;
    optional string MessageId = 5;
    repeated string NotifiableEntityIds = 6;
}

enum CustomDataPatchOperation {
    Set = 0;
    Remove = 1;
}

message CustomDataPatch {
    string ParentEntityId = 1;
    CustomDataPatchOperation Operation = 2;
    string Key = 3;
    optional string Value = 4;
}

message EditDocumentPacketCommand {
    string DocumentId = 1;
    repeated DocumentId AddDocumentsToPacket = 2;
    repeated DocumentId RemoveDocumentsFromPacket = 3;
}

message ResolutionRouteRemoval {
    string ParentEntityId = 1;
    string RouteId = 2;
    optional string Comment = 3;
    repeated string Labels = 4;
}

message TemplateToPost {
    string FromBoxId = 1;
    string ToBoxId = 2;
    string MessageFromBoxId = 3;
    string MessageToBoxId = 4;
    optional string MessageToDepartmentId = 5;
    repeated TemplateDocumentAttachment DocumentAttachments = 6;
    optional LockMode LockMode = 7;
    optional string FromDepartmentId = 8;
    optional string ToDepartmentId = 9;
    optional string MessageProxyBoxId = 10;
    optional string MessageProxyDepartmentId = 11;
    optional bool IsReusable = 12;
}

message TemplateDocumentAttachment {
    UnsignedContent UnsignedContent = 1;
    optional string Comment = 2;
    string TypeNamedId = 3;
    optional string Function = 4;
    optional string Version = 5;
    repeated MetadataItem Metadata = 6;
    optional int32 WorkflowId = 7;
    optional string CustomDocumentId = 8;
    optional string EditingSettingId = 9;
    optional bool NeedRecipientSignature = 10;
    optional PredefinedRecipientTitle PredefinedRecipientTitle = 11;
    optional bool RefusalDisabled = 12;
    repeated CustomDataItem CustomData = 13;
}

message TemplatePatchToPost {
    repeated TemplateRefusalAttachment Refusals = 1;
}

message TemplateRefusalAttachment {
    string DocumentId = 1;
    optional string Comment = 2;
    repeated string Labels = 3;
}

message PredefinedRecipientTitle {
    UnsignedContent UnsignedContent = 1;
}

message UnsignedContent {
    optional bytes Content = 1;
    optional string NameOnShelf = 2;
}

message TemplateTransformationToPost {
    string BoxId = 1;
    string TemplateId = 2;
    repeated DocumentTransformation DocumentTransformations = 3;
}

message DocumentTransformation {
    string DocumentId = 1;
    optional string CustomDocumentId = 2;
}
