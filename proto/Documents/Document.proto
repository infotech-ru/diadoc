syntax = "proto3";
import "Content.proto";
import "DocumentId.proto";
import "CustomDataItem.proto";
import "DocumentType.proto";
import "DocumentDirection.proto";
import "LockMode.proto";
import "Documents/AcceptanceCertificateDocument.proto";
import "Documents/BilateralDocument.proto";
import "Documents/InvoiceDocument.proto";
import "Documents/NonformalizedDocument.proto";
import "Documents/UnilateralDocument.proto";
import "Documents/UniversalTransferDocument.proto";
import "ResolutionTarget.proto";
import "ForwardDocumentEvent.proto";
import "Events/DiadocMessage-PostApi.proto";
import "OuterDocflows/OuterDocflow.proto";
import "DocflowStatusV3.proto";

package Diadoc.Api.Proto.Documents;

message Document {
    optional string IndexKey = 1;
    string MessageId = 2;
    string EntityId = 3;
    sfixed64 CreationTimestampTicks = 4;
    optional string CounteragentBoxId = 5;
    optional DocumentType DocumentType = 6;
    repeated DocumentId InitialDocumentIds = 7;
    repeated DocumentId SubordinateDocumentIds = 8;
    optional Content Content = 9;
    optional string FileName = 10;
    optional string DocumentDate = 11;
    optional string DocumentNumber = 12;
    optional NonformalizedDocument.NonformalizedDocumentMetadata NonformalizedDocumentMetadata = 13;
    optional InvoiceDocument.InvoiceMetadata InvoiceMetadata = 14;
    optional BilateralDocument.TrustConnectionRequestMetadata TrustConnectionRequestMetadata = 15;
    optional BilateralDocument.BasicDocumentMetadata Torg12Metadata = 16;
    optional InvoiceDocument.InvoiceRevisionMetadata InvoiceRevisionMetadata = 17;
    optional InvoiceDocument.InvoiceCorrectionMetadata InvoiceCorrectionMetadata = 18;
    optional InvoiceDocument.InvoiceCorrectionRevisionMetadata InvoiceCorrectionRevisionMetadata = 19;
    optional AcceptanceCertificateDocument.AcceptanceCertificateMetadata AcceptanceCertificateMetadata = 20;
    optional UnilateralDocument.ProformaInvoiceMetadata ProformaInvoiceMetadata = 21;
    optional BilateralDocument.BasicDocumentMetadata XmlTorg12Metadata = 22;
    optional BilateralDocument.BasicDocumentMetadata XmlAcceptanceCertificateMetadata = 23;
    optional bool IsDeleted = 24;
    optional string DepartmentId = 25;
    optional bool IsTest = 26;
    optional string FromDepartmentId = 27;
    optional string ToDepartmentId = 28;
    optional BilateralDocument.PriceListMetadata PriceListMetadata = 29;
    optional string CustomDocumentId = 30;
    optional ResolutionStatus ResolutionStatus = 31;
    optional RevocationStatus RevocationStatus = 32;
    optional sfixed64 SendTimestampTicks = 33;
    optional sfixed64 DeliveryTimestampTicks = 34;
    repeated ForwardDocumentEvent ForwardDocumentEvents = 35;
    optional BilateralDocument.BilateralDocumentMetadata ReconciliationActMetadata = 38;
    optional BilateralDocument.ContractMetadata ContractMetadata = 39;
    optional BilateralDocument.BasicDocumentMetadata Torg13Metadata = 40;
    optional UnilateralDocument.ServiceDetailsMetadata ServiceDetailsMetadata = 41;
    optional RoamingNotificationStatus RoamingNotificationStatus = 42;
    optional bool HasCustomPrintForm = 43;
    repeated CustomDataItem CustomData = 44;
    optional string PacketId = 45;
    optional DocumentDirection DocumentDirection = 46;
    optional sfixed64 LastModificationTimestampTicks = 47;
    optional bool IsEncryptedContent = 48;
    optional SenderSignatureStatus SenderSignatureStatus = 49;
    optional BilateralDocument.SupplementaryAgreementMetadata SupplementaryAgreementMetadata = 50;
    optional bool IsRead = 51;
    optional string RoamingNotificationStatusDescription = 52;
    optional bool PacketIsLocked = 53;
    optional NonformalizedDocument.NonformalizedDocumentMetadata PriceListAgreementMetadata = 54;
    optional NonformalizedDocument.NonformalizedDocumentMetadata CertificateRegistryMetadata = 55;
    optional UniversalTransferDocument.UniversalTransferDocumentMetadata UniversalTransferDocumentMetadata = 56;
    optional UniversalTransferDocument.UniversalTransferDocumentRevisionMetadata UniversalTransferDocumentRevisionMetadata = 57;
    optional UniversalTransferDocument.UniversalCorrectionDocumentMetadata UniversalCorrectionDocumentMetadata = 58;
    optional UniversalTransferDocument.UniversalCorrectionDocumentRevisionMetadata UniversalCorrectionDocumentRevisionMetadata = 59;
    optional string ResolutionRouteId = 60;
    optional string AttachmentVersion = 61;
    optional ProxySignatureStatus ProxySignatureStatus = 62;
    string TypeNamedId = 63;
    string Function = 64;
    int32 WorkflowId = 65;
    string Title = 66;
    repeated Events.MetadataItem Metadata = 67;
    RecipientReceiptMetadata RecipientReceiptMetadata = 68;
    ConfirmationMetadata ConfirmationMetadata = 69;
    RecipientResponseStatus RecipientResponseStatus = 70;
    AmendmentRequestMetadata AmendmentRequestMetadata = 71;
    optional Origin Origin = 72;
    optional string EditingSettingId = 73;
    LockMode LockMode = 74;
    SenderReceiptMetadata SenderReceiptMetadata = 75;
    string Version = 76;
    repeated LastOuterDocflow LastOuterDocflows = 77;
    optional string ProxyBoxId = 78;
    optional string ProxyDepartmentId = 79;
    DocflowStatusV3 DocflowStatus = 80;
}

message LastOuterDocflow {
    string ParentEntityId = 1;
    OuterDocflows.OuterDocflowInfo OuterDocflow = 2;
}

message ResolutionStatus {
    optional ResolutionStatusType Type = 1;
    optional ResolutionTarget Target = 2;
    string AuthorUserId = 3;
    string AuthorFIO = 4;
}

enum ResolutionStatusType {
    None = 0;
    Approved = 1;
    Disapproved = 2;
    ApprovementRequested = 3;
    SignatureRequested = 4;
    SignatureDenied = 5;
    ActionsRequested = 6;
}

enum RevocationStatus {
    UnknownRevocationStatus = 0;
    RevocationStatusNone = 1;
    RevocationIsRequestedByMe = 2;
    RequestsMyRevocation = 3;
    RevocationAccepted = 4;
    RevocationRejected = 5;
}

enum RoamingNotificationStatus {
    UnknownRoamingNotificationStatus = 0;
    RoamingNotificationStatusNone = 1;
    RoamingNotificationStatusSuccess = 2;
    RoamingNotificationStatusError = 3;
}

enum SenderSignatureStatus {
    UnknownSenderSignatureStatus = 0;
    WaitingForSenderSignature = 1;
    SenderSignatureUnchecked = 2;
    SenderSignatureCheckedAndValid = 3;
    SenderSignatureCheckedAndInvalid = 4;
}

enum ProxySignatureStatus {
    UnknownProxySignatureStatus = 0;
    ProxySignatureStatusNone = 1;
    WaitingForProxySignature = 2;
    WithProxySignature = 3;
    ProxySignatureRejected = 4;
    InvalidProxySignature = 5;
}

enum GeneralReceiptStatus {
    GeneralReceiptStatusUnknown = 0;
    GeneralReceiptStatusNotAcceptable = 1;
    HaveToCreateReceipt = 2;
    WaitingForReceipt = 3;
    Finished = 4;
}

message RecipientReceiptMetadata {
    GeneralReceiptStatus ReceiptStatus = 1;
    optional ConfirmationMetadata ConfirmationMetadata = 2;
}

message SenderReceiptMetadata {
    GeneralReceiptStatus ReceiptStatus = 1;
}

message ConfirmationMetadata {
    GeneralReceiptStatus ReceiptStatus = 1;
    sfixed64 DateTimeTicks = 2;
}

message AmendmentRequestMetadata {
    int32 AmendmentFlags = 1;
    GeneralReceiptStatus ReceiptStatus = 2;
}

enum RecipientResponseStatus {
    RecipientResponseStatusUnknown = 0;
    RecipientResponseStatusNotAcceptable = 1;
    WaitingForRecipientSignature = 2;
    WithRecipientSignature = 3;
    RecipientSignatureRequestRejected = 4;
    InvalidRecipientSignature = 5;
    WithRecipientPartiallySignature = 6;
}

message Origin {
    MessageType MessageType = 1;
    string MessageId = 2;
}

enum MessageType {
    Unknown = 0;
    Letter = 1;
    Draft = 2;
    Template = 3;
}
